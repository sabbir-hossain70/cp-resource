#include<bits/stdc++.h>
using  namespace std;
#define fast {ios_base::sync_with_stdio(false); cin.tie(0);}
typedef long long ll;
void remove(ll ind){};
void add(ll ind){};     // TODO: add value at ind from data structure
ll get_answer(){};  // TODO: extract the current answer of the data structure

ll block_size;

struct Query {
    ll l, r, ind;
    bool operator<(Query other) const
    {
        return make_pair(l / block_size, r) <
               make_pair(other.l / block_size, other.r);
    }
};

vector<ll> mos_algo(vector<Query> queries) {
    vector<ll> answers(queries.size());
    sort(queries.begin(), queries.end());

    // TODO: initialize data structure

    ll cur_l = 0;
    ll cur_r = -1;
    // invariant: data structure will always reflect the range [cur_l, cur_r]
    for (Query q : queries) {
        while (cur_l > q.l) {
            cur_l--;
            add(cur_l);
        }
        while (cur_r < q.r) {
            cur_r++;
            add(cur_r);
        }
        while (cur_l < q.l) {
            remove(cur_l);
            cur_l++;
        }
        while (cur_r > q.r) {
            remove(cur_r);
            cur_r--;
        }
        answers[q.ind] = get_answer();
    }
    return answers;
}

int main()
{
    fast
    ll i,j,k,m,n,c,t,x,y;

}

